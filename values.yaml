# Default values for codimd.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: quay.io/codimd/server
  tag: 1.4.0
  pullPolicy: IfNotPresent

service:
  name: codimd
  type: ClusterIP
  port: 3000

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  path: /
  hosts:
    - chart-example.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

securityContext:
  runAsUser: 10000  # default codimd container uid

persistence:
  enabled: true
  ## codimd data Persistent Volume access modes
  ## Must match those of existing PV or dynamic provisioner
  ## Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  accessModes:
    - ReadWriteOnce
  annotations: {}
  existingClaim: ""
  size: 2Gi
  ## A manually managed Persistent Volume and Claim
  ## Requires persistence.enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  # existingClaim:

  ## database data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"

podAnnotations: {}

## Additional environment variables can be set to configure CodiMD
## Storage and Auth providers are available in separate blocks below
## Ref: https://github.com/codimd/server/blob/master/docs/configuration-env-vars.md
extraVars: []

nodeSelector: {}

tolerations: []

affinity: {}


## CodiMD basics
codimd:
  domain: "example.org"
  # email: true
  # allow_email_register: false
  # url_path: ""
  # protocol_usessl: true
  # url_addport: false
  # allow_origin: ""
  # allow_pdf_export: false
  # log_level: "info"
  # allow_freeurl: false
  # forbidden_note_ids: "robots.txt,.well_known"
  # csp_enable: false
  # csp_reporturi: ""
  # hsts_enable: false
  # hsts_include_subdomains: false
  # hsts_max_age: 3153600
  # hsts_preload: true
  # allow_gravatar: false
  # usecdn: false
  # allow_anonymous: true
  # allow_anonymous_edits: false
  # default_permission: limited
  # session_life: 1209600000
  # toobusy_lag: 70

## Storage options. Only one can be active at any time
storage:
  # default: filesystem
  # all but the default require additional configuration below
  s3:
    enabled: false
    # region: ""
    # bucket: ""
    amazon:
      enabled: false
      # access_key_id: ""
      # secret_access_key: ""
    minio:
      enabled: false
      # access_key: ""
      # secret_key: ""
      # endpoint: "minio"
      # port: 9000
      # secure: true
  azure:
    enabled: false
    # connection_string: ""
    # container: ""
  imgur:
    enabled: false
    # clientid : ""
  lutim:
    enabled: false
    # url: ""


## All the different Auth providers
## E-Mail login/registration can be optionally left on
## even when using other providers
## More than one provider can be active at any time
auth:
  oauth2:
    enabled: false
    # user_profile_url: "https://example.com"
    # user_profile_username_attr: "name"
    # user_profile_display_name_attr: "display-name"
    # user_profile_email_attr: "email"
    # token_url: "https://example.com"
    # authorization_url: "https://example.com"
    # client_id: "abcedf0123456789"
    # client_secret: "abcedf0123456789"
    # providername: "My institution"

  saml:
    enabled: false
    # idpssourl: "https://idp.example.com/sso"
    # idpcert: "/path/to/cert.pem"
    # issuer: ""
    # disable_requested_authncontext: false
    # identifierformat: ""
    # groupattribute: "memberOf"
    # requiredgroups: "codimd-users"
    # externalgroups: "Temporary-staff"
    # attribute_id: "sAMAccountName"
    # attribute_username: "mailNickname"
    # attribute_email: "mail"

  ldap:
    enabled: false
    # url: "ldap://example.com"
    # binddn: ""
    # bindcredentials: ""
    # searchbase: "o=users,dc=example,dc=com"
    # searchfilter: "(uid={{username}})"
    # searchattributes: "displayName, mail"
    # useridfield: "uidNumber" # or uid or sAMAccountName
    # usernamefield: ""
    # tls_ca: "server-cert.pem, root.pem"
    # providername: "My institution"

  openid:
    enabled: false
    ## provider can be one of Dropbox, Facebook, GitHub, GitLab, Mattermost, Google, Twitter
    ## Gitlab and Mattermost require additional configuration below
    dropbox:
      # clientid: ""
      # clientsecret: ""
    facebook:
      # clientid: ""
      # clientsecret: ""
    github:
      # clientid: ""
      # clientsecret: ""
    google:
      # clientid: ""
      # clientsecret: ""
    twitter:
      # consumerkey: ""
      # consumersecret: ""
    gitlab:
      # clientid: ""
      # clientsecret: ""
      # baseurl: "https://gitlab.example.org"
      # scope: "api"
      # version: "v3"
    mattermost:
      # clientid: ""
      # clientsecret: ""
      # baseurl: "https://mattermost.example.org"

## Add additional volumes and mounts, e. g. for certificates
extraVolumes: |
extraVolumeMounts: |

## Configuration values for the postgresql dependency.
## ref: https://github.com/kubernetes/charts/blob/master/stable/postgresql/README.md
##
postgresql:
  enabled: true
  postgresqlUsername: "codimd"
  postgresqlDatabase: "codimd"
## Warning:
## Helm breaks a generated secret on every upgrade run:
## Ref: https://github.com/helm/charts/issues/5167
## Default: random 10 character string
# postgresqlPassword:

  ## stable/postgresql requires the init container run to set correct permissions
  ## for the data directory. But it can run as the postgresql container uid if
  ## the fsUser already set the correct ownership on mount
  volumePermissions:
    securityContext:
      runAsUser: 1001 # postgresql default container uid
